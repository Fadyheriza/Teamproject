Index: src/main/java/at/ac/fhcampuswien/teamproject/AdvancedGameMode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package at.ac.fhcampuswien.teamproject;\r\n\r\nimport javafx.animation.KeyFrame;\r\nimport javafx.animation.Timeline;\r\nimport javafx.application.Platform;\r\nimport javafx.geometry.Insets;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.layout.*;\r\nimport javafx.scene.canvas.Canvas;\r\nimport javafx.scene.canvas.GraphicsContext;\r\nimport javafx.scene.input.KeyCode;\r\nimport javafx.scene.input.KeyEvent;\r\nimport javafx.scene.media.Media;\r\nimport javafx.scene.media.MediaPlayer;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.text.Font;\r\nimport javafx.animation.AnimationTimer;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Random;\r\n\r\nimport javafx.scene.image.Image;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\nimport java.util.LinkedList;\r\nimport java.util.Queue;\r\n\r\npublic class AdvancedGameMode {\r\n    static int score = 0;\r\n    static int speed = 5;\r\n    static int width = 21;\r\n    static int height = 17;\r\n    static int appleX = 0;\r\n    static int appleY = 0;\r\n    static int cornersize = 24;\r\n    static List<Corner> snake = new ArrayList<>();\r\n    static Dir direction = Dir.left;\r\n    static boolean gameOver = false;\r\n    static Random rand = new Random();\r\n    private static HighScoreManager highScoreManager;\r\n    private static String currentPlayerUsername;\r\n    private static Stage mainStage;\r\n    private static Scene mainMenuScene;\r\n    private static final double LERP_RATE = 0.1;\r\n\r\n    private static Canvas canvas;\r\n    private static GraphicsContext gc;\r\n    private static AnimationTimer shakeTimer;\r\n    static KeyCode lastKey = KeyCode.UNDEFINED;\r\n    static Queue<Dir> directionQueue = new LinkedList<>();\r\n    static boolean isPaused = false;\r\n    private static final int GOLD_APPLE = 1;\r\n    private static final int BLUE_APPLE = 2;\r\n    private static final int CHOCOLATE_Apple = 3;\r\n\r\n    // Variables to track apple types and their effects\r\n    private static int currentAppleType = 0;\r\n    private static Timeline speedBoostTimer;\r\n    private static boolean isPoisoned = false;\r\n    private static long poisonEndTime = 0;\r\n    private static final String EAT_APPLE_SOUND = \"eat_apple.mp3\";\r\n    private static final String SPEED_BOOST_SOUND = \"speed_boost.mp3\";\r\n    private static final String GAME_OVER_SOUND = \"games.mp3\";\r\n    private static MediaPlayer mediaPlayer;\r\n\r\n    private static void shakeSnake() {\r\n        Random random = new Random();\r\n        for (Corner c : snake) {\r\n            c.x += random.nextInt(3) - 1; // ZufÃ¤llige Verschiebung um -1, 0 oder 1\r\n            c.y += random.nextInt(3) - 1;\r\n        }\r\n    }\r\n\r\n\r\n    public enum Dir {\r\n        left, right, up, down\r\n    }\r\n\r\n    public static class Corner {\r\n        int x;\r\n        int y;\r\n\r\n        public Corner(int x, int y) {\r\n            this.x = x;\r\n            this.y = y;\r\n        }\r\n    }\r\n\r\n    private static double lerp(double start, double end, double t) {\r\n        return start + t * (end - start);\r\n    }\r\n\r\n    private static Scene currentGameScene;\r\n\r\n    public static void handlePauseGame() {\r\n        isPaused = !isPaused;\r\n        if (isPaused) {\r\n            // When pausing the game\r\n            VBox pauseMenuLayout = createPauseMenuLayout();\r\n            StackPane root = new StackPane();\r\n            root.getChildren().addAll(canvas, pauseMenuLayout);\r\n            Scene pauseScene = new Scene(root, canvas.getWidth(), canvas.getHeight());\r\n            mainStage.setScene(pauseScene);\r\n\r\n            // Stop the game loop\r\n            if (gameLoop != null) {\r\n                gameLoop.stop();\r\n            }\r\n        } else {\r\n            // When resuming the game\r\n            if (gameLoop != null) {\r\n                gameLoop.start(); // Resume the game loop\r\n            }\r\n            ;\r\n            StackPane root = new StackPane();\r\n            root.getChildren().add(canvas); // Add only canvas to the root\r\n            currentGameScene = new Scene(root, canvas.getWidth(), canvas.getHeight()); // Update currentGameScene\r\n            mainStage.setScene(currentGameScene); // Set the updated scene\r\n            render(gc); // Explicitly call render to update the screen\r\n\r\n        }\r\n    }\r\n\r\n\r\n    private static VBox createPauseMenuLayout() {\r\n        VBox pauseMenuLayout = new VBox(20);\r\n        pauseMenuLayout.setAlignment(Pos.CENTER);\r\n        pauseMenuLayout.setPadding(new Insets(20, 50, 20, 50));\r\n        pauseMenuLayout.setBackground(new Background(new BackgroundFill(Color.rgb(0, 0, 0, 0.5), CornerRadii.EMPTY, Insets.EMPTY)));\r\n\r\n        Label pauseLabel = new Label(\"Game Paused\");\r\n        pauseLabel.setFont(new Font(\"Arial\", 24));\r\n        pauseLabel.setTextFill(Color.WHITE);\r\n\r\n        Button continueButton = new Button(\"Continue\");\r\n        continueButton.setFont(new Font(\"Arial\", 18));\r\n        continueButton.setOnAction(e -> handlePauseGame()); // Resume the game\r\n\r\n        Button mainMenuButton = new Button(\"Back to Main Menu\");\r\n        mainMenuButton.setFont(new Font(\"Arial\", 18));\r\n        mainMenuButton.setOnAction(e -> {\r\n            isPaused = false; // Ensure the game is unpaused\r\n            score = 0; // Reset the score\r\n            mainStage.setScene(mainMenuScene); // Return to main menu without resetting\r\n        });\r\n\r\n        pauseMenuLayout.getChildren().addAll(pauseLabel, continueButton, mainMenuButton);\r\n\r\n        return pauseMenuLayout;\r\n    }\r\n\r\n\r\n    private static AnimationTimer gameLoop;\r\n\r\n    public static Scene createGameScene(HighScoreManager scoreManager, String username) {\r\n        highScoreManager = scoreManager;\r\n        currentPlayerUsername = username;\r\n        newFood();\r\n\r\n        Pane root = new Pane();\r\n        canvas = new Canvas(width * cornersize, height * cornersize);\r\n        gc = canvas.getGraphicsContext2D();\r\n        root.getChildren().add(canvas);\r\n\r\n        // Initialize the game loop only if it hasn't been already\r\n        if (gameLoop == null) {\r\n            gameLoop = new AnimationTimer() {\r\n                long lastTick = 0;\r\n\r\n                @Override\r\n                public void handle(long now) {\r\n                    if (gameOver) {\r\n                        // Stop the game loop when it's game over\r\n                        this.stop();\r\n                        Platform.runLater(() -> handleGameOver()); // Handle game over on the JavaFX thread\r\n                        return;\r\n                    }\r\n\r\n                    if (lastTick == 0) {\r\n                        lastTick = now;\r\n                        tick(gc, (now - lastTick) / 1e9);\r\n                        return;\r\n                    }\r\n                    if (now - lastTick > 1000000000 / speed) {\r\n                        lastTick = now;\r\n                        tick(gc, (now - lastTick) / 1e9);\r\n                    }\r\n                }\r\n            };\r\n        }\r\n        gameLoop.start();\r\n\r\n        // Create a separate AnimationTimer for the shaking effect\r\n        shakeTimer = new AnimationTimer() {\r\n            @Override\r\n            public void handle(long now) {\r\n                if (gameOver) {\r\n                    // Continue shaking even when it's game over\r\n                    drawShakingSnake(gc);\r\n                }\r\n            }\r\n        };\r\n        shakeTimer.start();\r\n\r\n        canvas.addEventFilter(KeyEvent.KEY_PRESSED, key -> {\r\n            if (isOppositeDirection(key.getCode(), lastKey)) {\r\n                // Ignore if the directions are opposite\r\n                return;\r\n            }\r\n\r\n            if (key.getCode() == KeyCode.ESCAPE) {\r\n                handlePauseGame();\r\n            } else if (key.getCode() == KeyCode.W && direction != Dir.down) {\r\n                direction = Dir.up;\r\n            } else if (key.getCode() == KeyCode.A && direction != Dir.right) {\r\n                direction = Dir.left;\r\n            } else if (key.getCode() == KeyCode.S && direction != Dir.up) {\r\n                direction = Dir.down;\r\n            } else if (key.getCode() == KeyCode.D && direction != Dir.left) {\r\n                direction = Dir.right;\r\n            }\r\n\r\n            lastKey = key.getCode(); // Update the last key pressed\r\n        });\r\n\r\n        canvas.setFocusTraversable(true);\r\n        canvas.addEventFilter(KeyEvent.KEY_PRESSED, key -> {\r\n            Dir newDirection = null;\r\n            if (key.getCode() == KeyCode.W && direction != Dir.down) {\r\n                newDirection = Dir.up;\r\n            } else if (key.getCode() == KeyCode.A && direction != Dir.right) {\r\n                newDirection = Dir.left;\r\n            } else if (key.getCode() == KeyCode.S && direction != Dir.up) {\r\n                newDirection = Dir.down;\r\n            } else if (key.getCode() == KeyCode.D && direction != Dir.left) {\r\n                newDirection = Dir.right;\r\n            }\r\n            if (newDirection != null) {\r\n                directionQueue.add(newDirection);\r\n            }\r\n        });\r\n\r\n        snake.clear();\r\n        snake.add(new Corner(width / 2, height / 2));\r\n        snake.add(new Corner(width / 2, height / 2));\r\n        snake.add(new Corner(width / 2, height / 2));\r\n\r\n        currentGameScene = new Scene(root, width * cornersize, height * cornersize);\r\n        return currentGameScene;\r\n    }\r\n\r\n    private static boolean isOppositeDirection(KeyCode current, KeyCode last) {\r\n        if (current == KeyCode.W && last == KeyCode.S) return true;\r\n        if (current == KeyCode.S && last == KeyCode.W) return true;\r\n        if (current == KeyCode.A && last == KeyCode.D) return true;\r\n        if (current == KeyCode.D && last == KeyCode.A) return true;\r\n        return false;\r\n    }\r\n\r\n    public static void tick(GraphicsContext gc, double deltaTime) {\r\n        if (isPaused) {\r\n            return; // Skip updating game logic if the game is paused\r\n        }\r\n\r\n        if (!directionQueue.isEmpty()) {\r\n            direction = directionQueue.poll();\r\n        }\r\n\r\n        Corner head = snake.get(0);\r\n        int newX = head.x;\r\n        int newY = head.y;\r\n\r\n        if (isPoisoned) {\r\n            // Invert controls if poisoned\r\n            switch (direction) {\r\n                case up:\r\n                    newY--;\r\n                    break;\r\n                case down:\r\n                    newY++;\r\n                    break;\r\n                case left:\r\n                    newX++;\r\n                    break;\r\n                case right:\r\n                    newX--;\r\n                    break;\r\n            }\r\n\r\n            // Check for collision with walls after inverting controls\r\n            if (newX < 0 || newX >= width || newY < 0 || newY >= height) {\r\n                gameOver = true;\r\n                isPoisoned = false; // Reset poison effect after game over\r\n                return;\r\n            }\r\n        } else {\r\n            // Only update snake position if not poisoned\r\n            switch (direction) {\r\n                case up:\r\n                    newY--;\r\n                    break;\r\n                case down:\r\n                    newY++;\r\n                    break;\r\n                case left:\r\n                    newX--;\r\n                    break;\r\n                case right:\r\n                    newX++;\r\n                    break;\r\n            }\r\n\r\n            // Collision detection with walls\r\n            if (newX < 0 || newX >= width || newY < 0 || newY >= height) {\r\n                // Check if the snake hits the wall\r\n                if (!isPoisoned) {\r\n                    // Only end the game if not poisoned\r\n                    gameOver = true;\r\n                }\r\n                return;\r\n            }\r\n        }\r\n\r\n        // Collision detection with itself\r\n        for (int i = 1; i < snake.size(); i++) {\r\n            Corner segment = snake.get(i);\r\n            if (newX == segment.x && newY == segment.y) {\r\n                if (!isPoisoned) {\r\n                    // Only end the game if not poisoned\r\n                    gameOver = true;\r\n                }\r\n                return;\r\n            }\r\n        }\r\n\r\n        // moving body\r\n        for (int i = snake.size() - 1; i > 0; i--) {\r\n            snake.get(i).x = snake.get(i - 1).x;\r\n            snake.get(i).y = snake.get(i - 1).y;\r\n        }\r\n\r\n        head.x = newX;\r\n        head.y = newY;\r\n\r\n        // Check if snake eats the apple\r\n        if (appleX == head.x && appleY == head.y) {\r\n            int previousScore = score;\r\n\r\n            switch (currentAppleType) {\r\n                case 0: // RED_APPLE\r\n                    System.out.println(\"RED_APPLE\");\r\n                    playSound(EAT_APPLE_SOUND);\r\n                    speed = Math.min(10, speed + 1); // Increase speed by 1\r\n                    score++;\r\n                    break;\r\n                case GOLD_APPLE:\r\n                    System.out.println(\"GOLD_APPLE\");\r\n                    playSound(SPEED_BOOST_SOUND);\r\n                    startSpeedBoostTimer();\r\n                    break;\r\n                case BLUE_APPLE:\r\n                    System.out.println(\"BLUE_APPLE\");\r\n                    playSound(EAT_APPLE_SOUND);\r\n                    score += 3;\r\n                    break;\r\n                case CHOCOLATE_Apple:\r\n                    System.out.println(\"CHOCOLATE_Apple\");\r\n                    playSound(EAT_APPLE_SOUND);\r\n                    playSound(SPEED_BOOST_SOUND);\r\n                    startPoisonEffect();\r\n                    break;\r\n                default:\r\n                    System.out.println(\"default\");\r\n                    playSound(EAT_APPLE_SOUND);\r\n\r\n                    score++;\r\n                    break;\r\n            }\r\n\r\n            if (score > previousScore) {\r\n                speed = Math.min(10, speed + snake.size() / 5); // Adjust the speed increment as needed\r\n            }\r\n\r\n            addNewSegment(); // Add the new segment after updating score and apple type\r\n            newFood(); // Generate a new food after updating score\r\n        }\r\n\r\n        // Render everything\r\n        render(gc);\r\n    }\r\n\r\n\r\n    private static void startSpeedBoostTimer() {\r\n        int originalSpeed = speed; // Save the original speed\r\n\r\n        speed = 10; // Set the boosted speed\r\n\r\n        if (speedBoostTimer != null) {\r\n            speedBoostTimer.stop();\r\n        }\r\n\r\n        speedBoostTimer = new Timeline(new KeyFrame(Duration.seconds(15), event -> {\r\n            speed = originalSpeed; // Restore the original speed after the boost duration\r\n            speedBoostTimer.stop();\r\n        }));\r\n        speedBoostTimer.play();\r\n    }\r\n\r\n    private static void startPoisonEffect() {\r\n        isPoisoned = true;\r\n        if (speedBoostTimer != null) {\r\n            speedBoostTimer.stop();\r\n        }\r\n        speedBoostTimer = new Timeline(new KeyFrame(Duration.seconds(15), event -> {\r\n            isPoisoned = false; // Reset poison effect after duration\r\n        }));\r\n        speedBoostTimer.play();\r\n    }\r\n\r\n    private static void renderBackground(GraphicsContext gc) {\r\n        // Clear the canvas\r\n        gc.clearRect(0, 0, width * cornersize, height * cornersize);\r\n\r\n        // background\r\n        String imageUrl = \"bg.png\";\r\n        Image image = new Image(imageUrl, width * cornersize, height * cornersize, false, false);\r\n        gc.drawImage(image, 0, 0);\r\n    }\r\n\r\n    private static void drawApple(GraphicsContext gc, double x, double y, Color color) {\r\n        gc.setFill(color);\r\n        gc.fillOval(x, y, cornersize, cornersize);\r\n    }\r\n\r\n    private static void render(GraphicsContext gc) {\r\n        renderBackground(gc);\r\n\r\n        // score\r\n        gc.setFill(Color.WHITE);\r\n        gc.setFont(new Font(\"\", 30));\r\n        gc.fillText(\"Score: \" + score, 10, 30);\r\n\r\n        switch (currentAppleType) {\r\n            case GOLD_APPLE:\r\n                drawApple(gc, appleX * cornersize, appleY * cornersize, Color.GOLD);\r\n                break;\r\n            case BLUE_APPLE:\r\n                drawApple(gc, appleX * cornersize, appleY * cornersize, Color.BLUE);\r\n                break;\r\n            case CHOCOLATE_Apple:\r\n                drawApple(gc, appleX * cornersize, appleY * cornersize, Color.CHOCOLATE);\r\n                break;\r\n            default:\r\n                drawApple(gc, appleX * cornersize, appleY * cornersize, Color.RED);\r\n                break;\r\n        }\r\n\r\n        // snake\r\n        for (Corner c : snake) {\r\n            gc.setFill(Color.DARKGRAY);\r\n            gc.fillRect(c.x * cornersize, c.y * cornersize, cornersize - 1, cornersize - 1);\r\n            gc.setFill(Color.BLACK);\r\n            gc.fillRect(c.x * cornersize, c.y * cornersize, cornersize - 2, cornersize - 2);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // food random places\r\n    public static void newFood() {\r\n        while (true) {\r\n            appleX = rand.nextInt(width);\r\n            appleY = rand.nextInt(height);\r\n\r\n            boolean isOccupied = false;\r\n            for (Corner c : snake) {\r\n                if (c.x == appleX && c.y == appleY) {\r\n                    isOccupied = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!isOccupied) {\r\n                break;\r\n            }\r\n\r\n            if (snake.size() == width * height) {\r\n                break;\r\n            }\r\n        }\r\n        // Ensure that the red apple (0) always appears\r\n        if (score % 5 == 0) {\r\n            currentAppleType = 0; // Red apple every 5 points\r\n        } else {\r\n            int randomAppleType = rand.nextInt(3) + 1; // 1 for GOLD_APPLE, 2 for BLUE_APPLE, 3 for YELLOW_APPLE\r\n            currentAppleType = randomAppleType;\r\n        }\r\n    }\r\n\r\n    public static void addNewSegment() {\r\n        Corner lastSegment = snake.get(snake.size() - 1);\r\n        snake.add(new Corner(lastSegment.x, lastSegment.y));\r\n    }\r\n\r\n    public static void drawShakingSnake(GraphicsContext gc) {\r\n        Random random = new Random();\r\n        for (Corner c : snake) {\r\n            int shakeX = random.nextInt(3) - 1; // ZufÃ¤llige Verschiebung um -1, 0 oder 1\r\n            int shakeY = random.nextInt(3) - 1;\r\n\r\n            // Zeichnen der Schlange mit zufÃ¤lligen Verschiebungen\r\n            gc.setFill(Color.DARKGRAY);\r\n            gc.fillRect(c.x * cornersize + shakeX, c.y * cornersize + shakeY, cornersize - 1, cornersize - 1);\r\n            gc.setFill(Color.BLACK);\r\n            gc.fillRect(c.x * cornersize + shakeX, c.y * cornersize + shakeY, cornersize - 2, cornersize - 2);\r\n        }\r\n        ;\r\n    }\r\n\r\n    public static void handleGameOver() {\r\n        gameOver = true;\r\n        if (gameLoop != null) {\r\n            gameLoop.stop();\r\n        }\r\n\r\n        // Create game over interface elements\r\n        VBox gameOverLayout = new VBox(20);\r\n        gameOverLayout.setAlignment(Pos.CENTER);\r\n        gameOverLayout.setPadding(new Insets(20, 50, 20, 50));\r\n        gameOverLayout.setBackground(new Background(new BackgroundFill(Color.TRANSPARENT, CornerRadii.EMPTY, Insets.EMPTY)));\r\n        playSound(GAME_OVER_SOUND);\r\n\r\n        // Display High Score and Username\r\n        Label highScoreLabel = new Label(\"High Score: \" + score);\r\n        highScoreLabel.setStyle(\"-fx-font-size: 18px; -fx-font-weight: bold;-fx-background-color: white; -fx-text-fill: black; -fx-padding: 5;\");\r\n\r\n        Label usernameLabel = new Label(\"Username: \" + currentPlayerUsername);\r\n        usernameLabel.setStyle(\"-fx-font-size: 18px; -fx-font-weight: bold;-fx-background-color: white; -fx-text-fill: black; -fx-padding: 5;\");\r\n\r\n        highScoreManager.addScore(currentPlayerUsername, score, \"Advanced\");\r\n\r\n        // Play Again Button\r\n        Button playAgainButton = new Button(\"Play Again\");\r\n        playAgainButton.setOnAction(e -> {\r\n            resetGame();\r\n            Scene gameScene = createGameScene(highScoreManager, currentPlayerUsername);\r\n            mainStage.setScene(gameScene);\r\n        });\r\n\r\n        // Back to Main Menu Button\r\n        Button backButton = new Button(\"Back to Main Menu\");\r\n        backButton.setOnAction(e -> {\r\n            resetGame();\r\n            mainStage.setScene(mainMenuScene);\r\n        });\r\n        gameOverLayout.getChildren().addAll(highScoreLabel, usernameLabel, playAgainButton, backButton);\r\n\r\n        // Overlay the game over layout on top of the game canvas\r\n        StackPane root = new StackPane();\r\n        root.getChildren().addAll(canvas, gameOverLayout); // canvas is your game canvas\r\n\r\n        // Set the new scene, which is essentially an overlay over the existing canvas\r\n        Scene gameOverScene = new Scene(root, canvas.getWidth(), canvas.getHeight());\r\n        mainStage.setScene(gameOverScene);\r\n\r\n        score = 0;\r\n\r\n    }\r\n\r\n\r\n    public static void resetGame() {\r\n        speed = 5;\r\n        if (gameLoop != null) {\r\n            gameLoop.stop();\r\n        }\r\n        if (shakeTimer != null) {\r\n            shakeTimer.stop();\r\n        }\r\n        // Reset game variables\r\n        snake.clear();\r\n        snake.add(new Corner(width / 2, height / 2));\r\n        snake.add(new Corner(width / 2, height / 2));\r\n        snake.add(new Corner(width / 2, height / 2));\r\n        direction = Dir.left;\r\n        gameOver = false;\r\n        newFood();\r\n        score = 0;\r\n        gc.clearRect(0, 0, canvas.getWidth(), canvas.getHeight());\r\n\r\n    }\r\n\r\n    private static void playSound(String soundFileName) {\r\n        try {\r\n            String soundFileUrl = AdvancedGameMode.class.getResource(\"/\" + soundFileName).toExternalForm();\r\n            Media sound = new Media(soundFileUrl);\r\n            mediaPlayer = new MediaPlayer(sound);\r\n            mediaPlayer.play();\r\n        } catch (NullPointerException e) {\r\n            System.err.println(\"Sound file not found: \" + soundFileName);\r\n        }\r\n    }\r\n\r\n    public static void setMainMenuScene(Scene scene) {\r\n        mainMenuScene = scene;\r\n    }\r\n\r\n    public static void setMainStage(Stage stage) {\r\n        mainStage = stage;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/ac/fhcampuswien/teamproject/AdvancedGameMode.java b/src/main/java/at/ac/fhcampuswien/teamproject/AdvancedGameMode.java
--- a/src/main/java/at/ac/fhcampuswien/teamproject/AdvancedGameMode.java	(revision 71a8f48623337a6ce51b9f3c8dfee8889984365e)
+++ b/src/main/java/at/ac/fhcampuswien/teamproject/AdvancedGameMode.java	(date 1706035723331)
@@ -23,6 +23,7 @@
 import java.util.Random;
 
 import javafx.scene.image.Image;
+import javafx.scene.text.FontWeight;
 import javafx.stage.Stage;
 import javafx.util.Duration;
 
@@ -278,10 +279,10 @@
             // Invert controls if poisoned
             switch (direction) {
                 case up:
-                    newY--;
+                    newY++;
                     break;
                 case down:
-                    newY++;
+                    newY--;
                     break;
                 case left:
                     newX++;
@@ -292,7 +293,7 @@
             }
 
             // Check for collision with walls after inverting controls
-            if (newX < 0 || newX >= width || newY < 0 || newY >= height) {
+            if (newX < 0 || newX >= width || newY <  1 || newY >= height) {
                 gameOver = true;
                 isPoisoned = false; // Reset poison effect after game over
                 return;
@@ -315,7 +316,7 @@
             }
 
             // Collision detection with walls
-            if (newX < 0 || newX >= width || newY < 0 || newY >= height) {
+            if (newX < 0 || newX >= width || newY < 1 || newY >= height) {
                 // Check if the snake hits the wall
                 if (!isPoisoned) {
                     // Only end the game if not poisoned
@@ -440,9 +441,17 @@
         renderBackground(gc);
 
         // score
-        gc.setFill(Color.WHITE);
-        gc.setFont(new Font("", 30));
-        gc.fillText("Score: " + score, 10, 30);
+        gc.setFont(Font.font("Arial", FontWeight.BOLD, 25));
+
+        // Zeichnen des Texts mit einem schwarzen Rand
+        String scoreText = "Score: " + score;
+        gc.setStroke(Color.BLACK); // Farbe des Rands
+        gc.setLineWidth(2); // Dicke des Rands
+        gc.strokeText(scoreText, 10, 20); // Zeichnen des Rands
+
+        // Zeichnen des Texts mit weiÃer FÃ¼llung
+        gc.setFill(Color.WHITE); // Farbe der FÃ¼llung
+        gc.fillText(scoreText, 10, 20);
 
         switch (currentAppleType) {
             case GOLD_APPLE:
@@ -487,6 +496,10 @@
             if (!isOccupied) {
                 break;
             }
+            if (snake.size() == width * (height - 1)) {
+                // Alle Felder auÃer der ersten Zeile sind besetzt
+                break;
+            }
 
             if (snake.size() == width * height) {
                 break;
@@ -499,6 +512,7 @@
             int randomAppleType = rand.nextInt(3) + 1; // 1 for GOLD_APPLE, 2 for BLUE_APPLE, 3 for YELLOW_APPLE
             currentAppleType = randomAppleType;
         }
+
     }
 
     public static void addNewSegment() {
Index: .idea/dataSources.local.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"dataSourceStorageLocal\" created-in=\"IU-233.13135.103\">\r\n    <data-source name=\"snakegame\" uuid=\"f7109305-4a9f-4b0d-aff1-0d916d016e19\">\r\n      <database-info product=\"SQLite\" version=\"3.43.0\" jdbc-version=\"4.2\" driver-name=\"SQLite JDBC\" driver-version=\"3.43.0.0\" dbms=\"SQLITE\" exact-version=\"3.43.0\" exact-driver-version=\"3.43\">\r\n        <identifier-quote-string>&quot;</identifier-quote-string>\r\n      </database-info>\r\n      <case-sensitivity plain-identifiers=\"mixed\" quoted-identifiers=\"mixed\" />\r\n      <schema-mapping>\r\n        <introspection-scope>\r\n          <node kind=\"schema\" qname=\"@\" />\r\n        </introspection-scope>\r\n      </schema-mapping>\r\n    </data-source>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/dataSources.local.xml b/.idea/dataSources.local.xml
--- a/.idea/dataSources.local.xml	(revision 71a8f48623337a6ce51b9f3c8dfee8889984365e)
+++ b/.idea/dataSources.local.xml	(date 1706033120823)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="dataSourceStorageLocal" created-in="IU-233.13135.103">
+  <component name="dataSourceStorageLocal" created-in="IU-232.10227.8">
     <data-source name="snakegame" uuid="f7109305-4a9f-4b0d-aff1-0d916d016e19">
       <database-info product="SQLite" version="3.43.0" jdbc-version="4.2" driver-name="SQLite JDBC" driver-version="3.43.0.0" dbms="SQLITE" exact-version="3.43.0" exact-driver-version="3.43">
         <identifier-quote-string>&quot;</identifier-quote-string>
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"88844b39-5d69-46f2-aec4-1a064bb15afa\" name=\"Changes\" comment=\"Design fehlt\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"ExternalProjectsManager\">\r\n    <system id=\"GRADLE\">\r\n      <state>\r\n        <task path=\"$PROJECT_DIR$\">\r\n          <activation />\r\n        </task>\r\n        <projects_view>\r\n          <tree_state>\r\n            <expand />\r\n            <select />\r\n          </tree_state>\r\n        </projects_view>\r\n      </state>\r\n    </system>\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;history&quot;: [\r\n    {\r\n      &quot;assignee&quot;: &quot;ismxil02&quot;\r\n    }\r\n  ],\r\n  &quot;lastFilter&quot;: {\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">\r\n    <option name=\"selectedUrlAndAccountId\">\r\n      <UrlAndAccount>\r\n        <option name=\"accountId\" value=\"9a17095d-2dec-4a4b-8201-a3a3549f45cd\" />\r\n        <option name=\"url\" value=\"https://github.com/Fadyheriza/Teamproject.git\" />\r\n      </UrlAndAccount>\r\n    </option>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n    <option name=\"showPreview\" value=\"true\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 4\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2aMe0efBvRuXWfrrPMA5eoKs1qP\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\r\n    &quot;Application.SnakeGame.executor&quot;: &quot;Run&quot;,\r\n    &quot;Gradle.Build Teamproject.executor&quot;: &quot;Run&quot;,\r\n    &quot;Gradle.Teamproject [:SnakeGame.main()].executor&quot;: &quot;Run&quot;,\r\n    &quot;Gradle.Teamproject.executor&quot;: &quot;Run&quot;,\r\n    &quot;Gradle.m2 [:SnakeGame.main()].executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\r\n    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,\r\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/ismai/IdeaProjects/Teamproject/src/main/resources&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Project&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;inlay.hints&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\ismai\\IdeaProjects\\Teamproject\\src\\main\\resources\" />\r\n      <recent name=\"C:\\Users\\kingp\\IdeaProjects\\Teamproject\\src\\main\\resources\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\kingp\\IdeaProjects\\Teamproject\\src\\main\\resources\" />\r\n      <recent name=\"C:\\Users\\kingp\\IdeaProjects\\Teamproject\\Data\" />\r\n      <recent name=\"C:\\Users\\kingp\\IdeaProjects\\Teamproject\\src\" />\r\n    </key>\r\n    <key name=\"MoveClassesOrPackagesDialog.RECENTS_KEY\">\r\n      <recent name=\"at.ac.fhcampuswien.teamproject\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.SnakeGame\">\r\n    <configuration name=\"SnakeGame\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"ALTERNATIVE_JRE_PATH\" value=\"corretto-17\" />\r\n      <option name=\"ALTERNATIVE_JRE_PATH_ENABLED\" value=\"true\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"at.ac.fhcampuswien.teamproject.SnakeGame\" />\r\n      <module name=\"Teamproject.main\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"at.ac.fhcampuswien.teamproject.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Teamproject\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list />\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>true</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <RunAsTest>false</RunAsTest>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.SnakeGame\" />\r\n        <item itemvalue=\"Gradle.Teamproject\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"jdk-17.0.9-corretto-17.0.9-f644763e9732-ebaef533\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"88844b39-5d69-46f2-aec4-1a064bb15afa\" name=\"Changes\" comment=\"\" />\r\n      <created>1704132656448</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1704132656448</updated>\r\n      <workItem from=\"1704132657451\" duration=\"1902000\" />\r\n      <workItem from=\"1704142777542\" duration=\"3481000\" />\r\n      <workItem from=\"1704146735595\" duration=\"6805000\" />\r\n      <workItem from=\"1704162635706\" duration=\"87000\" />\r\n      <workItem from=\"1704250437742\" duration=\"642000\" />\r\n      <workItem from=\"1704251097690\" duration=\"384000\" />\r\n      <workItem from=\"1704280643126\" duration=\"3999000\" />\r\n      <workItem from=\"1704292288791\" duration=\"251000\" />\r\n      <workItem from=\"1704292711935\" duration=\"1751000\" />\r\n      <workItem from=\"1704392242069\" duration=\"20412000\" />\r\n      <workItem from=\"1704894035483\" duration=\"2023000\" />\r\n      <workItem from=\"1705418027403\" duration=\"706000\" />\r\n      <workItem from=\"1705428779409\" duration=\"11000\" />\r\n      <workItem from=\"1705607909723\" duration=\"6424000\" />\r\n      <workItem from=\"1705774490838\" duration=\"710000\" />\r\n      <workItem from=\"1705778614885\" duration=\"200000\" />\r\n      <workItem from=\"1705786807087\" duration=\"21524000\" />\r\n      <workItem from=\"1705867516995\" duration=\"3806000\" />\r\n      <workItem from=\"1705872223142\" duration=\"2454000\" />\r\n      <workItem from=\"1705875794651\" duration=\"361000\" />\r\n      <workItem from=\"1706007035228\" duration=\"1713000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Background check and 3 buttons check game window 500 x400\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704134555106</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704134555106</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Start game fehlt noch\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704144196530</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704144196530</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Start game fehlt noch\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704146587237</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704146587237</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Hauptspiel fehlt und aussehen der Schlange sowie Highscore\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704162394675</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704162394675</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Advanced fehlt, design verbessern und das man wieder zurÃ¼ck gehehn kann nachdem man verloren hat\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704236001492</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704236001492</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Advanced fehlt, design verbessern und das man wieder zurÃ¼ck gehehn kann nachdem man verloren hat\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704251604208</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704251604208</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Advanced fehlt, design verbessern und das man wieder zurÃ¼ck gehehn kann nachdem man verloren hat\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704284267497</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704284267497</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Advanced fehlt, design verbessern und escape button\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704284309587</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704284309587</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Advanced fehlt, design verbessern und escape button\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704290349801</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704290349801</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Advanced fehlt, design verbessern und escape button\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704292309958</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704292309958</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Advanced fehlt, design verbessern und escape button\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1704405874386</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1704405874386</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"design verbessern paar sachen vom review verbessert\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705611981232</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705611981232</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"design verbessern paar sachen vom review verbessert\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705613915294</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705613915294</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"design verbessern paar sachen vom review verbessert\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705863230398</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705863230398</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"design verbessern paar sachen vom review verbessert\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705872528847</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705872528848</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Design und Advanced fehlt sonst alles da\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705875532116</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705875532116</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"Design fehlt\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1705954642169</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1705954642170</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"18\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"Background check and 3 buttons check game window 500 x400\" />\r\n    <MESSAGE value=\"Start game fehlt noch\" />\r\n    <MESSAGE value=\"Hauptspiel fehlt und aussehen der Schlange sowie Highscore\" />\r\n    <MESSAGE value=\"Advanced fehlt, design verbessern und das man wieder zurÃ¼ck gehehn kann nachdem man verloren hat\" />\r\n    <MESSAGE value=\"Advanced fehlt, design verbessern und escape button\" />\r\n    <MESSAGE value=\"design verbessern paar sachen vom review verbessert\" />\r\n    <MESSAGE value=\"Design und Advanced fehlt sonst alles da\" />\r\n    <MESSAGE value=\"Design fehlt\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Design fehlt\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 71a8f48623337a6ce51b9f3c8dfee8889984365e)
+++ b/.idea/workspace.xml	(date 1706036014804)
@@ -4,7 +4,14 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="88844b39-5d69-46f2-aec4-1a064bb15afa" name="Changes" comment="Design fehlt" />
+    <list default="true" id="88844b39-5d69-46f2-aec4-1a064bb15afa" name="Changes" comment="Design fehlt">
+      <change beforePath="$PROJECT_DIR$/.idea/dataSources.local.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/dataSources.local.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_03_01_2024_16_32__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_03_01_2024_16_32__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Data/snakegame.db" beforeDir="false" afterPath="$PROJECT_DIR$/Data/snakegame.db" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/at/ac/fhcampuswien/teamproject/AdvancedGameMode.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/at/ac/fhcampuswien/teamproject/AdvancedGameMode.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/at/ac/fhcampuswien/teamproject/StandardGameMode.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/at/ac/fhcampuswien/teamproject/StandardGameMode.java" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -39,6 +46,7 @@
   </component>
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+    <option name="UPDATE_TYPE" value="REBASE" />
   </component>
   <component name="GitHubPullRequestSearchHistory">{
   &quot;history&quot;: [
Index: src/main/java/at/ac/fhcampuswien/teamproject/StandardGameMode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package at.ac.fhcampuswien.teamproject;\r\n\r\nimport javafx.application.Platform;\r\nimport javafx.geometry.Insets;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.layout.*;\r\nimport javafx.scene.canvas.Canvas;\r\nimport javafx.scene.canvas.GraphicsContext;\r\nimport javafx.scene.input.KeyCode;\r\nimport javafx.scene.input.KeyEvent;\r\nimport javafx.scene.media.Media;\r\nimport javafx.scene.media.MediaPlayer;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.text.Font;\r\nimport javafx.animation.AnimationTimer;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Random;\r\n\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.text.FontWeight;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.util.LinkedList;\r\nimport java.util.Queue;\r\n\r\npublic class StandardGameMode {\r\n    static int score = 0;\r\n    static int speed = 5;\r\n    static int width = 21;\r\n    static int height = 17;\r\n    static int appleX = 0;\r\n    static int appleY = 0;\r\n    static int cornersize = 24;\r\n    static List<Corner> snake = new ArrayList<>();\r\n    static Dir direction = Dir.left;\r\n    static boolean gameOver = false;\r\n    static Random rand = new Random();\r\n    private static HighScoreManager highScoreManager;\r\n    private static String currentPlayerUsername;\r\n    private static Stage mainStage;\r\n    private static Scene mainMenuScene;\r\n    private static final double LERP_RATE = 0.1;\r\n    private static final String GAME_OVER_SOUND = \"games.mp3\";\r\n\r\n    private static MediaPlayer mediaPlayer;\r\n    private static Canvas canvas;\r\n    private static GraphicsContext gc;\r\n    private static AnimationTimer shakeTimer;\r\n    static KeyCode lastKey = KeyCode.UNDEFINED;\r\n    static Queue<Dir> directionQueue = new LinkedList<>();\r\n    static boolean isPaused = false;\r\n\r\n    private static void shakeSnake() {\r\n        Random random = new Random();\r\n        for (Corner c : snake) {\r\n            c.x += random.nextInt(3) - 1; // ZufÃ¤llige Verschiebung um -1, 0 oder 1\r\n            c.y += random.nextInt(3) - 1;\r\n        }\r\n    }\r\n\r\n    public enum Dir {\r\n        left, right, up, down\r\n    }\r\n\r\n    public static class Corner {\r\n        int x;\r\n        int y;\r\n\r\n        public Corner(int x, int y) {\r\n            this.x = x;\r\n            this.y = y;\r\n        }\r\n    }\r\n\r\n    private static double lerp(double start, double end, double t) {\r\n        return start + t * (end - start);\r\n    }\r\n\r\n    private static Scene currentGameScene;\r\n\r\n    public static void handlePauseGame() {\r\n        // Check if the game is already over, and if so, do nothing\r\n        if (gameOver) {\r\n            return;\r\n        }\r\n\r\n        isPaused = !isPaused;\r\n        if (isPaused) {\r\n            // When pausing the game\r\n            VBox pauseMenuLayout = createPauseMenuLayout();\r\n            StackPane root = new StackPane();\r\n            root.getChildren().addAll(canvas, pauseMenuLayout);\r\n            Scene pauseScene = new Scene(root, canvas.getWidth(), canvas.getHeight());\r\n            mainStage.setScene(pauseScene);\r\n\r\n            // Stop the game loop\r\n            if (gameLoop != null) {\r\n                gameLoop.stop();\r\n            }\r\n        } else {\r\n            // When resuming the game\r\n            if (gameLoop != null) {\r\n                gameLoop.start(); // Resume the game loop\r\n            }\r\n            StackPane root = new StackPane();\r\n            root.getChildren().add(canvas); // Add only canvas to the root\r\n            currentGameScene = new Scene(root, canvas.getWidth(), canvas.getHeight()); // Update currentGameScene\r\n            mainStage.setScene(currentGameScene); // Set the updated scene\r\n            render(gc); // Explicitly call render to update the screen\r\n        }\r\n    }\r\n\r\n\r\n    private static VBox createPauseMenuLayout() {\r\n        VBox pauseMenuLayout = new VBox(20);\r\n        pauseMenuLayout.setAlignment(Pos.CENTER);\r\n        pauseMenuLayout.setPadding(new Insets(20, 50, 20, 50));\r\n        pauseMenuLayout.setBackground(new Background(new BackgroundFill(Color.rgb(0, 0, 0, 0.5), CornerRadii.EMPTY, Insets.EMPTY)));\r\n\r\n        Label pauseLabel = new Label(\"Game Paused\");\r\n        pauseLabel.setFont(new Font(\"Arial\", 24));\r\n        pauseLabel.setTextFill(Color.WHITE);\r\n\r\n        Button continueButton = new Button(\"Continue\");\r\n        continueButton.setFont(new Font(\"Arial\", 18));\r\n        continueButton.setOnAction(e -> handlePauseGame()); // Resume the game\r\n\r\n        Button mainMenuButton = new Button(\"Back to Main Menu\");\r\n        mainMenuButton.setFont(new Font(\"Arial\", 18));\r\n        mainMenuButton.setOnAction(e -> {\r\n            isPaused = false; // Ensure the game is unpaused\r\n            score = 0; // Reset the score\r\n            mainStage.setScene(mainMenuScene); // Return to main menu without resetting\r\n        });\r\n\r\n        pauseMenuLayout.getChildren().addAll(pauseLabel, continueButton, mainMenuButton);\r\n\r\n        return pauseMenuLayout;\r\n    }\r\n\r\n\r\n    private static AnimationTimer gameLoop;\r\n\r\n    public static Scene createGameScene(HighScoreManager scoreManager, String username) {\r\n        highScoreManager = scoreManager;\r\n        currentPlayerUsername = username;\r\n        newFood();\r\n\r\n        Pane root = new Pane();\r\n        canvas = new Canvas(width * cornersize, height * cornersize);\r\n        gc = canvas.getGraphicsContext2D();\r\n        root.getChildren().add(canvas);\r\n\r\n        // Initialize the game loop only if it hasn't been already\r\n        if (gameLoop == null) {\r\n            gameLoop = new AnimationTimer() {\r\n                long lastTick = 0;\r\n\r\n                @Override\r\n                public void handle(long now) {\r\n                    if (gameOver) {\r\n                        // Stop the game loop when it's game over\r\n                        this.stop();\r\n                        Platform.runLater(() -> handleGameOver()); // Handle game over on the JavaFX thread\r\n                        return;\r\n                    }\r\n\r\n                    if (lastTick == 0) {\r\n                        lastTick = now;\r\n                        tick(gc, (now - lastTick) / 1e9);\r\n                        return;\r\n                    }\r\n                    if (now - lastTick > 1000000000 / speed) {\r\n                        lastTick = now;\r\n                        tick(gc, (now - lastTick) / 1e9);\r\n                    }\r\n                }\r\n            };\r\n        }\r\n        gameLoop.start();\r\n\r\n        // Create a separate AnimationTimer for the shaking effect\r\n        shakeTimer = new AnimationTimer() {\r\n            @Override\r\n            public void handle(long now) {\r\n                if (gameOver) {\r\n                    // Continue shaking even when it's game over\r\n                    drawShakingSnake(gc);\r\n                }\r\n            }\r\n        };\r\n        shakeTimer.start();\r\n\r\n        canvas.addEventFilter(KeyEvent.KEY_PRESSED, key -> {\r\n            if (isOppositeDirection(key.getCode(), lastKey)) {\r\n                // Ignore if the directions are opposite\r\n                return;\r\n            }\r\n\r\n            if (key.getCode() == KeyCode.ESCAPE) {\r\n                handlePauseGame();\r\n            } else if (key.getCode() == KeyCode.W && direction != Dir.down) {\r\n                direction = Dir.up;\r\n            } else if (key.getCode() == KeyCode.A && direction != Dir.right) {\r\n                direction = Dir.left;\r\n            } else if (key.getCode() == KeyCode.S && direction != Dir.up) {\r\n                direction = Dir.down;\r\n            } else if (key.getCode() == KeyCode.D && direction != Dir.left) {\r\n                direction = Dir.right;\r\n            }\r\n\r\n            lastKey = key.getCode(); // Update the last key pressed\r\n        });\r\n\r\n        canvas.setFocusTraversable(true);\r\n        canvas.addEventFilter(KeyEvent.KEY_PRESSED, key -> {\r\n            Dir newDirection = null;\r\n            if (key.getCode() == KeyCode.W && direction != Dir.down) {\r\n                newDirection = Dir.up;\r\n            } else if (key.getCode() == KeyCode.A && direction != Dir.right) {\r\n                newDirection = Dir.left;\r\n            } else if (key.getCode() == KeyCode.S && direction != Dir.up) {\r\n                newDirection = Dir.down;\r\n            } else if (key.getCode() == KeyCode.D && direction != Dir.left) {\r\n                newDirection = Dir.right;\r\n            }\r\n            if (newDirection != null) {\r\n                directionQueue.add(newDirection);\r\n            }\r\n        });\r\n\r\n        snake.clear();\r\n        snake.add(new Corner(width / 2, height / 2));\r\n        snake.add(new Corner(width / 2, height / 2));\r\n        snake.add(new Corner(width / 2, height / 2));\r\n\r\n        currentGameScene = new Scene(root, width * cornersize, height * cornersize);\r\n        return currentGameScene;\r\n    }\r\n\r\n    private static boolean isOppositeDirection(KeyCode current, KeyCode last) {\r\n        if (current == KeyCode.W && last == KeyCode.S) return true;\r\n        if (current == KeyCode.S && last == KeyCode.W) return true;\r\n        if (current == KeyCode.A && last == KeyCode.D) return true;\r\n        if (current == KeyCode.D && last == KeyCode.A) return true;\r\n        return false;\r\n    }\r\n\r\n    public static void tick(GraphicsContext gc, double deltaTime) {\r\n        if (isPaused) {\r\n            return; // Skip updating game logic if the game is paused\r\n        }\r\n        if (!directionQueue.isEmpty()) {\r\n            direction = directionQueue.poll();\r\n        }\r\n\r\n        Corner head = snake.get(0);\r\n        int newX = head.x;\r\n        int newY = head.y;\r\n\r\n        switch (direction) {\r\n            case up:\r\n                newY--;\r\n                break;\r\n            case down:\r\n                newY++;\r\n                break;\r\n            case left:\r\n                newX--;\r\n                break;\r\n            case right:\r\n                newX++;\r\n                break;\r\n        }\r\n\r\n\r\n        if (newX < 0 || newX >= width || newY < 1 || newY >= height) { // Start checking from y = 1\r\n            gameOver = true;\r\n            return;\r\n        }\r\n\r\n        // Collision detection with itself\r\n        for (int i = 1; i < snake.size(); i++) {\r\n            Corner segment = snake.get(i);\r\n            if (newX == segment.x && newY == segment.y) {\r\n                gameOver = true;\r\n                return;\r\n            }\r\n        }\r\n        //moving body\r\n        for (int i = snake.size() - 1; i > 0; i--) {\r\n            snake.get(i).x = snake.get(i - 1).x;\r\n            snake.get(i).y = snake.get(i - 1).y;\r\n        }\r\n\r\n        head.x = newX;\r\n        head.y = newY;\r\n\r\n        // Check if snake eats the apple\r\n        if (appleX == head.x && appleY == head.y) {\r\n            addNewSegment();\r\n            newFood();\r\n            score++;\r\n            speed += 0.75;\r\n        }\r\n\r\n        // Render everything\r\n        render(gc);\r\n    }\r\n\r\n    private static void renderBackground(GraphicsContext gc) {\r\n        // Clear the canvas\r\n        gc.clearRect(0, 0, width * cornersize, height * cornersize);\r\n\r\n        // background\r\n        String imageUrl = \"bg.png\";\r\n        Image image = new Image(imageUrl, width * cornersize, height * cornersize, false, false);\r\n        gc.drawImage(image, 0, 0);\r\n    }\r\n\r\n    private static void render(GraphicsContext gc) {\r\n        renderBackground(gc);\r\n\r\n        // score\r\n        gc.setFont(Font.font(\"Arial\", FontWeight.BOLD, 25));\r\n\r\n        // Zeichnen des Texts mit einem schwarzen Rand\r\n        String scoreText = \"Score: \" + score;\r\n        gc.setStroke(Color.BLACK); // Farbe des Rands\r\n        gc.setLineWidth(2); // Dicke des Rands\r\n        gc.strokeText(scoreText, 10, 20); // Zeichnen des Rands\r\n\r\n        // Zeichnen des Texts mit weiÃer FÃ¼llung\r\n        gc.setFill(Color.WHITE); // Farbe der FÃ¼llung\r\n        gc.fillText(scoreText, 10, 20);\r\n\r\n        //foodcolor\r\n        Color cc = Color.RED;\r\n\r\n        gc.setFill(cc);\r\n        gc.fillOval(appleX * cornersize, appleY * cornersize, cornersize, cornersize);\r\n\r\n        // snake\r\n        for (Corner c : snake) {\r\n            gc.setFill(Color.DARKGRAY);\r\n            gc.fillRect(c.x * cornersize, c.y * cornersize, cornersize - 1, cornersize - 1);\r\n            gc.setFill(Color.BLACK);\r\n            gc.fillRect(c.x * cornersize, c.y * cornersize, cornersize - 2, cornersize - 2);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    // food random places\r\n    public static void newFood() {\r\n        while (true) {\r\n            appleX = rand.nextInt(width);\r\n            appleY = rand.nextInt(height - 1) + 1; // Verhindert, dass der Apfel in der ersten Zeile (y=0) erscheint\r\n\r\n            boolean isOccupied = false;\r\n            for (Corner c : snake) {\r\n                if (c.x == appleX && c.y == appleY) {\r\n                    isOccupied = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!isOccupied) {\r\n                break;\r\n            }\r\n\r\n            if (snake.size() == width * (height - 1)) {\r\n                // Alle Felder auÃer der ersten Zeile sind besetzt\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void setMainStage(Stage stage) {\r\n        mainStage = stage;\r\n    }\r\n\r\n    public static void addNewSegment() {\r\n        Corner lastSegment = snake.get(snake.size() - 1);\r\n        snake.add(new Corner(lastSegment.x, lastSegment.y));\r\n    }\r\n\r\n    public static void drawShakingSnake(GraphicsContext gc) {\r\n        Random random = new Random();\r\n        for (Corner c : snake) {\r\n            int shakeX = random.nextInt(3) - 1; // ZufÃ¤llige Verschiebung um -1, 0 oder 1\r\n            int shakeY = random.nextInt(3) - 1;\r\n\r\n            // Zeichnen der Schlange mit zufÃ¤lligen Verschiebungen\r\n            gc.setFill(Color.DARKGRAY);\r\n            gc.fillRect(c.x * cornersize + shakeX, c.y * cornersize + shakeY, cornersize - 1, cornersize - 1);\r\n            gc.setFill(Color.BLACK);\r\n            gc.fillRect(c.x * cornersize + shakeX, c.y * cornersize + shakeY, cornersize - 2, cornersize - 2);\r\n        }\r\n        ;\r\n    }\r\n\r\n    public static void handleGameOver() {\r\n        gameOver = true;\r\n        if (gameLoop != null) {\r\n            gameLoop.stop();\r\n        }\r\n        String gameMode = \"Standard\";\r\n        highScoreManager.addScore(currentPlayerUsername, score, gameMode);\r\n        speed = 5;\r\n        playSound(GAME_OVER_SOUND);\r\n\r\n        // Create game over interface elements\r\n        VBox gameOverLayout = new VBox(20);\r\n        gameOverLayout.setAlignment(Pos.CENTER);\r\n        gameOverLayout.setPadding(new Insets(20, 50, 20, 50));\r\n        gameOverLayout.setBackground(new Background(new BackgroundFill(Color.TRANSPARENT, CornerRadii.EMPTY, Insets.EMPTY)));\r\n\r\n        // Display High Score and Username\r\n        Label highScoreLabel = new Label(\"High Score: \" + score);\r\n        highScoreLabel.setStyle(\"-fx-font-size: 18px; -fx-font-weight: bold;-fx-background-color: white; -fx-text-fill: black; -fx-padding: 5;\");\r\n\r\n        Label usernameLabel = new Label(\"Username: \" + currentPlayerUsername);\r\n        usernameLabel.setStyle(\"-fx-font-size: 18px; -fx-font-weight: bold;-fx-background-color: white; -fx-text-fill: black; -fx-padding: 5;\");\r\n\r\n\r\n        // Play Again Button\r\n        Button playAgainButton = new Button(\"Play Again\");\r\n        playAgainButton.setOnAction(e -> {\r\n            resetGame();\r\n            Scene gameScene = createGameScene(highScoreManager, currentPlayerUsername);\r\n            mainStage.setScene(gameScene);\r\n        });\r\n\r\n        // Back to Main Menu Button\r\n        Button backButton = new Button(\"Back to Main Menu\");\r\n        backButton.setOnAction(e -> mainStage.setScene(mainMenuScene));\r\n\r\n        gameOverLayout.getChildren().addAll(highScoreLabel, usernameLabel, playAgainButton, backButton);\r\n\r\n        // Overlay the game over layout on top of the game canvas\r\n        StackPane root = new StackPane();\r\n        root.getChildren().addAll(canvas, gameOverLayout); // canvas is your game canvas\r\n\r\n        // Set the new scene, which is essentially an overlay over the existing canvas\r\n        Scene gameOverScene = new Scene(root, canvas.getWidth(), canvas.getHeight());\r\n        mainStage.setScene(gameOverScene);\r\n\r\n        score = 0;\r\n\r\n    }\r\n\r\n    private static void playSound(String soundFileName) {\r\n        try {\r\n            String soundFileUrl = AdvancedGameMode.class.getResource(\"/\" + soundFileName).toExternalForm();\r\n            Media sound = new Media(soundFileUrl);\r\n            mediaPlayer = new MediaPlayer(sound);\r\n            mediaPlayer.play();\r\n        } catch (NullPointerException e) {\r\n            System.err.println(\"Sound file not found: \" + soundFileName);\r\n        }\r\n    }\r\n\r\n    public static void resetGame() {\r\n        if (gameLoop != null) {\r\n            gameLoop.stop();\r\n        }\r\n        if (shakeTimer != null) {\r\n            shakeTimer.stop();\r\n        }\r\n        // Reset game variables\r\n        snake.clear();\r\n        snake.add(new Corner(width / 2, height / 2));\r\n        snake.add(new Corner(width / 2, height / 2));\r\n        snake.add(new Corner(width / 2, height / 2));\r\n        direction = Dir.left;\r\n        gameOver = false;\r\n        newFood();\r\n        speed = 5;\r\n    }\r\n\r\n    public static void setMainMenuScene(Scene scene) {\r\n        mainMenuScene = scene;\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/at/ac/fhcampuswien/teamproject/StandardGameMode.java b/src/main/java/at/ac/fhcampuswien/teamproject/StandardGameMode.java
--- a/src/main/java/at/ac/fhcampuswien/teamproject/StandardGameMode.java	(revision 71a8f48623337a6ce51b9f3c8dfee8889984365e)
+++ b/src/main/java/at/ac/fhcampuswien/teamproject/StandardGameMode.java	(date 1706034355158)
@@ -305,7 +305,7 @@
             addNewSegment();
             newFood();
             score++;
-            speed += 0.75;
+            speed += 0.80;
         }
 
         // Render everything
@@ -373,10 +373,7 @@
                 break;
             }
 
-            if (snake.size() == width * (height - 1)) {
-                // Alle Felder auÃer der ersten Zeile sind besetzt
-                break;
-            }
+
         }
     }
 
